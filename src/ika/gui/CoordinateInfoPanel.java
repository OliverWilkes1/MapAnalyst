/*
 * CoordinateInfoPanel.java
 *
 * Created on July 1, 2005, 3:05 PM
 */
package ika.gui;

import com.jhlabs.map.MapMath;
import ika.geo.osm.OpenStreetMap;
import ika.geo.osm.Projector;
import ika.map.tools.MapToolMouseMotionListener;
import ika.map.tools.MeasureToolListener;
import ika.mapanalyst.Manager;
import ika.utils.CoordinateFormatter;
import java.text.DecimalFormat;

/**
 *
 * @author jenny
 */
public class CoordinateInfoPanel extends javax.swing.JPanel
        implements MeasureToolListener, MapToolMouseMotionListener {

    private static final DecimalFormat angleFormatter
            = new DecimalFormat("###,##0.0");

    private Manager manager = null;

    /**
     * Creates new form CoordinateInfoPanel
     */
    public CoordinateInfoPanel() {
        initComponents();
    }

    /**
     * @param manager the manager to set
     */
    public void setManager(Manager manager) {
        this.manager = manager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        xCoordLabel = new javax.swing.JLabel();
        yCoordLabel = new javax.swing.JLabel();
        distTextLabel = new javax.swing.JLabel();
        distLabel = new javax.swing.JLabel();
        angleTextLabel = new javax.swing.JLabel();
        angleLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        xCoordLabel.setFont(xCoordLabel.getFont().deriveFont(xCoordLabel.getFont().getSize()-2f));
        xCoordLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        xCoordLabel.setToolTipText("Horizontal coordinate of the mouse pointer.");
        xCoordLabel.setPreferredSize(new java.awt.Dimension(130, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(xCoordLabel, gridBagConstraints);

        yCoordLabel.setFont(yCoordLabel.getFont().deriveFont(yCoordLabel.getFont().getSize()-2f));
        yCoordLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        yCoordLabel.setToolTipText("Vertical coordinate of the mouse pointer.");
        yCoordLabel.setPreferredSize(new java.awt.Dimension(130, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(yCoordLabel, gridBagConstraints);

        distTextLabel.setFont(distTextLabel.getFont().deriveFont(distTextLabel.getFont().getSize()-2f));
        distTextLabel.setText("Distance : ");
        distTextLabel.setToolTipText("The last distance measured with the Measure Distance and Angle tool.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(distTextLabel, gridBagConstraints);

        distLabel.setFont(distLabel.getFont().deriveFont(distLabel.getFont().getSize()-2f));
        distLabel.setText("-");
        distLabel.setToolTipText("The last distance measured with the Measure Distance and Angle tool.");
        distLabel.setPreferredSize(new java.awt.Dimension(120, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(distLabel, gridBagConstraints);

        angleTextLabel.setFont(angleTextLabel.getFont().deriveFont(angleTextLabel.getFont().getSize()-2f));
        angleTextLabel.setText("Angle : ");
        angleTextLabel.setToolTipText("The last angle measured with the Measure Distance and Angle tool.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(angleTextLabel, gridBagConstraints);

        angleLabel.setFont(angleLabel.getFont().deriveFont(angleLabel.getFont().getSize()-2f));
        angleLabel.setText("-");
        angleLabel.setToolTipText("The last angle measured with the Measure Distance and Angle tool.");
        angleLabel.setPreferredSize(new java.awt.Dimension(120, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        add(angleLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void clearDistance() {
        this.distLabel.setText("-");
        this.angleLabel.setText("-");
    }

    /**
     * Returns true if the passed map is showing the "new" reference map and is
     * using OSM.
     *
     * @param mapComponent
     * @return
     */
    private boolean mapUsesOSM(MapComponent mapComponent) {
        boolean osm = "new".equals(mapComponent.getName())
                && manager != null && manager.isUsingOpenStreetMap();
        return osm;
    }

    /**
     * The measure tool has been moved on the map. Update distance and angle.
     *
     * @param x1 drag start x
     * @param y1 drag start y
     * @param x2 drag end x
     * @param y2 drag end y
     * @param mapComponent map
     */
    @Override
    public void updateMeasureTool(double x1, double y1, double x2, double y2,
            MapComponent mapComponent) {

        final double d, angleRad;

        if (mapUsesOSM(mapComponent)) {
            // convert to spherical coordinates
            double[] startLonLat = Projector.OSM2Geo(x1, y1);
            double[] endLonLat = Projector.OSM2Geo(x2, y2);

            // compute great circle distance on sphere, assuming spherical Earth
            d = MapMath.greatCircleDistance(startLonLat[0], startLonLat[1],
                    endLonLat[0], endLonLat[1]) * OpenStreetMap.R;

            angleRad = Double.NaN;
        } else {
            final double dx = x2 - x1;
            final double dy = y2 - y1;
            d = Math.sqrt(dx * dx + dy * dy);
            angleRad = Math.atan2(dy, dx);
        }

        // distance
        CoordinateFormatter coordFormatter = mapComponent.getCoordinateFormatter();
        this.distLabel.setText(coordFormatter.format(d));

        // angle
        double azimuth = -Math.toDegrees(angleRad) + 90.;
        if (azimuth < 0) {
            azimuth += 360;
        }
        String angleStr = angleFormatter.format(azimuth);
        if (Double.isFinite(azimuth)) {
            this.angleLabel.setText("<HTML>" + angleStr + "&#176</HTML>");
        } else {
            this.angleLabel.setText("Ð");
        }
    }

    private void updateCoordinates(java.awt.geom.Point2D.Double point,
            ika.gui.MapComponent mapComponent) {
        if (point != null) {
            boolean osm = mapUsesOSM(mapComponent);
            String[] str = mapComponent.coordinatesStrings(point, osm);
            xCoordLabel.setText(str[0]);
            yCoordLabel.setText(str[1]);
        } else {
            this.xCoordLabel.setText("-");
            this.yCoordLabel.setText("-");
        }
    }

    @Override
    public void mouseMoved(java.awt.geom.Point2D.Double point,
            ika.gui.MapComponent mapComponent) {
        updateCoordinates(point, mapComponent);
    }

    public void registerWithMapComponent(MapComponent mapComponent) {
        mapComponent.addMouseMotionListener(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel angleLabel;
    private javax.swing.JLabel angleTextLabel;
    private javax.swing.JLabel distLabel;
    private javax.swing.JLabel distTextLabel;
    private javax.swing.JLabel xCoordLabel;
    private javax.swing.JLabel yCoordLabel;
    // End of variables declaration//GEN-END:variables

}
